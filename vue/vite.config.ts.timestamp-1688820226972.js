// vite.config.ts
import { loadEnv } from "vite";

// vite/alias.ts
import path from "path";
var alias = {
  "@": path.resolve("D:\\bm\\v2023\\laravel-banmashou\\vue\\vite", "../src"),
  "#": path.resolve("D:\\bm\\v2023\\laravel-banmashou\\vue\\vite", "../types")
};
var alias_default = alias;

// vite/util.ts
import _ from "lodash";
function parseEnv(env) {
  const envs = _.cloneDeep(env);
  Object.entries(env).forEach(([key, value]) => {
    if (value == "true" || value == "false")
      envs[key] = value == "true" ? true : false;
    else if (/^\d+$/.test(value))
      envs[key] = Number(value);
    else if (value == "null")
      envs[key] = null;
    else if (value == "undefined")
      envs[key] = void 0;
  });
  return envs;
}

// vite/plugins/index.ts
import vue from "@vitejs/plugin-vue";

// vite/plugins/mock.ts
import { viteMockServe } from "vite-plugin-mock";
function setupMockPlugin(isBuild) {
  return viteMockServe({
    mockPath: "mock",
    localEnabled: !isBuild
  });
}

// vite/plugins/autoImport.ts
import AutoImport from "unplugin-auto-import/vite";
import Components from "unplugin-vue-components/vite";
import { ElementPlusResolver, VueUseComponentsResolver } from "unplugin-vue-components/resolvers";
function autoImport(plugins) {
  plugins.push(
    AutoImport({
      resolvers: [ElementPlusResolver()],
      imports: ["vue", "vue-router"],
      dts: "types/auto-imports.d.ts"
    }),
    Components({
      resolvers: [
        ElementPlusResolver(),
        VueUseComponentsResolver()
      ],
      dirs: ["src/components"],
      directoryAsNamespace: true,
      dts: "types/components.d.ts"
    })
  );
}

// vite/plugins/index.ts
function setupPlugins(isBuild, env) {
  const plugins = [vue()];
  plugins.push(setupMockPlugin(isBuild));
  autoImport(plugins);
  return plugins;
}

// vite.config.ts
import { visualizer } from "rollup-plugin-visualizer";
var vite_config_default = ({ command, mode }) => {
  const isBuild = command == "build";
  const root = process.cwd();
  const env = parseEnv(loadEnv(mode, root));
  return {
    plugins: [...setupPlugins(isBuild, env), visualizer()],
    resolve: {
      alias: alias_default
    },
    server: {
      host: true,
      proxy: {
        "/api": {
          target: env.VITE_API_URL,
          changeOrigin: true
        }
      }
    },
    build: {
      rollupOptions: {
        emptyOutDir: true,
        output: {
          manualChunks(id) {
            if (id.includes("node_modules")) {
              return id.toString().split("node_modules/")[1].split("/")[0].toString();
            }
          }
        }
      }
    }
  };
};
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,
